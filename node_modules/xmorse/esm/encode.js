var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { DEFAULT_OPTION, STANDARD } from './const';
// to hex
function unicodeHexMorse(ch) {
    var r = [];
    for (var i = 0; i < ch.length; i++) {
        r[i] = ('00' + ch.charCodeAt(i).toString(16)).slice(-4);
    }
    var s = r.join(''); // unicode 值
    s = parseInt(s, 16).toString(2); // 转二进制
    return s;
}
/**
 * encode: encode string to morse code.
 * - msg: strings need to be encode.
 * - option: encode option.
 *
 * Return the morse code.
 *
 * Usage
 * var option = {
 *  space: ' ',
 *  long: '-',
 *  short: '*'
 * };
 * encode('I love you.', option);
 * Will get return with `** *-** --- ***- * -*-- --- **- *-*-*-`.
 *
 **/
export function encode(msg, option) {
    var _a = __assign(__assign({}, DEFAULT_OPTION), option), space = _a.space, short = _a.short, long = _a.long;
    // 删除空格，转大写，分割为数组
    var text = msg
        .replace(/\s+/g, '')
        .toLocaleUpperCase()
        .split('');
    return text
        .map(function (ch) {
        var r = STANDARD[ch];
        if (!r) {
            r = unicodeHexMorse(ch); // 找不到，说明是非标准的字符，使用 unicode。
        }
        return r.replace(/0/g, short).replace(/1/g, long);
    })
        .join(space);
}
//# sourceMappingURL=encode.js.map
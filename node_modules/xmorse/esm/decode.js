var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { DEFAULT_OPTION, REVERSED_STANDARD } from './const';
function morseHexUnicode(mor) {
    mor = parseInt(mor, 2); // 解析 2 进制数
    if (isNaN(mor))
        return ''; // 解析失败，直接返回空字符串跳过
    return unescape('%u' + mor.toString(16)); // 转 16 进制 -> unicode -> unicode 转字符串
}
/**
 * decode: encode string to morse code.
 * - morse: morse code need to be decode.
 * - option: encode option.
 *
 * Return the decode string.
 *
 * Usage
 * var option = {
 *  space: ' ',
 *  long: '-',
 *  short: '*'
 * };
 * decode('** *-** --- ***- * -*-- --- **- *-*-*-', option);
 * Will get return with `ILOVEYOU`.
 *
 **/
export function decode(morse, option) {
    var _a = __assign(__assign({}, DEFAULT_OPTION), option), space = _a.space, short = _a.short, long = _a.long;
    return morse
        .split(space)
        .map(function (mor) {
        var m = mor
            .replace(/\s+/g, '') // 去除空格
            .replace(new RegExp('\\' + short, 'g'), '0')
            .replace(new RegExp('\\' + long, 'g'), '1'); // 转二进制;
        var r = REVERSED_STANDARD[m];
        if (!r)
            r = morseHexUnicode(m); // 找不到，说明是非标准字符的 morse，使用 unicode 解析方式。
        return r;
    })
        .join('');
}
//# sourceMappingURL=decode.js.map